package com.android.ql.lf.redpacketmonkey.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.ql.lf.redpacketmonkey.data.greendao.ReceiverConverter;
import java.util.List;

import com.android.ql.lf.redpacketmonkey.data.greendao.RedPacketBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RED_PACKET_BEAN".
*/
public class RedPacketBeanDao extends AbstractDao<RedPacketBean, Long> {

    public static final String TABLENAME = "RED_PACKET_BEAN";

    /**
     * Properties of entity RedPacketBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, String.class, "time", false, "TIME");
        public final static Property SendDate = new Property(2, java.util.Date.class, "sendDate", false, "SEND_DATE");
        public final static Property EndDate = new Property(3, java.util.Date.class, "endDate", false, "END_DATE");
        public final static Property Account = new Property(4, double.class, "account", false, "ACCOUNT");
        public final static Property MaxReceiveNum = new Property(5, int.class, "maxReceiveNum", false, "MAX_RECEIVE_NUM");
        public final static Property HasReceiveNum = new Property(6, int.class, "hasReceiveNum", false, "HAS_RECEIVE_NUM");
        public final static Property ReceiverList = new Property(7, String.class, "receiverList", false, "RECEIVER_LIST");
    }

    private final ReceiverConverter receiverListConverter = new ReceiverConverter();

    public RedPacketBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RedPacketBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RED_PACKET_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIME\" TEXT," + // 1: time
                "\"SEND_DATE\" INTEGER," + // 2: sendDate
                "\"END_DATE\" INTEGER," + // 3: endDate
                "\"ACCOUNT\" REAL NOT NULL ," + // 4: account
                "\"MAX_RECEIVE_NUM\" INTEGER NOT NULL ," + // 5: maxReceiveNum
                "\"HAS_RECEIVE_NUM\" INTEGER NOT NULL ," + // 6: hasReceiveNum
                "\"RECEIVER_LIST\" TEXT);"); // 7: receiverList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RED_PACKET_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RedPacketBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
 
        java.util.Date sendDate = entity.getSendDate();
        if (sendDate != null) {
            stmt.bindLong(3, sendDate.getTime());
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(4, endDate.getTime());
        }
        stmt.bindDouble(5, entity.getAccount());
        stmt.bindLong(6, entity.getMaxReceiveNum());
        stmt.bindLong(7, entity.getHasReceiveNum());
 
        List receiverList = entity.getReceiverList();
        if (receiverList != null) {
            stmt.bindString(8, receiverListConverter.convertToDatabaseValue(receiverList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RedPacketBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
 
        java.util.Date sendDate = entity.getSendDate();
        if (sendDate != null) {
            stmt.bindLong(3, sendDate.getTime());
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(4, endDate.getTime());
        }
        stmt.bindDouble(5, entity.getAccount());
        stmt.bindLong(6, entity.getMaxReceiveNum());
        stmt.bindLong(7, entity.getHasReceiveNum());
 
        List receiverList = entity.getReceiverList();
        if (receiverList != null) {
            stmt.bindString(8, receiverListConverter.convertToDatabaseValue(receiverList));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RedPacketBean readEntity(Cursor cursor, int offset) {
        RedPacketBean entity = new RedPacketBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // time
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // sendDate
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // endDate
            cursor.getDouble(offset + 4), // account
            cursor.getInt(offset + 5), // maxReceiveNum
            cursor.getInt(offset + 6), // hasReceiveNum
            cursor.isNull(offset + 7) ? null : receiverListConverter.convertToEntityProperty(cursor.getString(offset + 7)) // receiverList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RedPacketBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSendDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setEndDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setAccount(cursor.getDouble(offset + 4));
        entity.setMaxReceiveNum(cursor.getInt(offset + 5));
        entity.setHasReceiveNum(cursor.getInt(offset + 6));
        entity.setReceiverList(cursor.isNull(offset + 7) ? null : receiverListConverter.convertToEntityProperty(cursor.getString(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RedPacketBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RedPacketBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RedPacketBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
